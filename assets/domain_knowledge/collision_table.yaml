# Provided ground-truth collision relations among the atomic parts making 
# up truck structures, encoded as matrix. The collision matrix encodes possible
# directions of disassembly of each atomic part w.r.t. some other part along
# x/y/z axes, computed from their respective poses in the desired completed
# structure.

# Group atomic parts by their categories and assign integer indices, which
# correspond to respective positions in the collision matrix.
part_groups:
    0: [cabin, quad_cabin, hemtt_cabin]
    1: [chassis_front]
    2: [chassis_center, flat_chassis_center, spares_chassis_center, staircase_quad_chassis_center, staircase_hemtt_chassis_center]
    3: [chassis_back]
    4: [load, platform, dumper, ladder, rocket_launcher]
    5: [fl_fender, normal_fl_fender, large_fl_fender]
    6: [fr_fender, normal_fr_fender, large_fr_fender]
    7: [bl_fender, normal_bl_fender, large_bl_fender, double_bl_fender]
    8: [br_fender, normal_br_fender, large_br_fender, double_br_fender]
    9: [wheel, normal_wheel, large_wheel]
    10: [bolt]

# Assign integer indices to contact point types
contact_points:
    0: cabin/front1
    1: cabin/front2
    2: chassis_front/center
    3: chassis_front/cabin1
    4: chassis_front/cabin2
    5: chassis_front/lfw
    6: chassis_front/rfw
    7: chassis_center/front
    8: chassis_center/back
    9: chassis_back/center
    10: chassis_back/load
    11: chassis_back/lfw0
    12: chassis_back/lfw1
    13: chassis_back/lfw2
    14: chassis_back/rfw0
    15: chassis_back/rfw1
    16: chassis_back/rfw2
    17: load/back
    18: fl_fender/wheel
    19: fr_fender/wheel
    20: bl_fender/wheel
    21: bl_fender/wheel1
    22: bl_fender/wheel2
    23: br_fender/wheel
    24: br_fender/wheel1
    25: br_fender/wheel2
    26: wheel/bolt
    27: bolt/bolt

# Identify each part instance by a unique signature, as target assemblies may
# require multiple instances of the same part (group) in their structures. Then
# assign (arbitrary) integer indexing to be used as shortcut reference.
#
# Let A denote each part instance of interest, and B denote some other instance
# that allows A to be distinguished from other instances of the same category
# by virtue of a connection between A-B at contact points resp. X and Y.
# Then, represent each instance by a 4-tuple (part group id of A, instance id
# of B, contact point id of X, contact point id of Y). X,B,Y may be omitted
# and replaced by a filler value 'null' iff there is only one instance of the
# same part group as A in the whole structure and thus A is uniquely identified
# by the part group id.
#
# (Note: This will suffice for our domain where all instances of part groups
# with more than one instances can be uniquely determined by contact with their
# direct neighbors, but structures that have multiple copies of identical 
# substructures will need more rigorous and sophisticated approach in encoding
# the ground-truth oracle. But that's out of our scope for now.)
part_instances:
    0: [0, null, null, null]        # Cabin
    1: [1, null, null, null]        # Chassis front
    2: [2, null, null, null]        # Chassis center
    3: [3, null, null, null]        # Chassis back
    4: [4, null, null, null]        # Load
    5: [5, null, null, null]        # Front left fender
    6: [9, 5, 26, 18]               # Wheel (fl)
    7: [10, 5, 27, 18]              # Bolt (fl)
    8: [6, null, null, null]        # Front right fender
    9: [9, 8, 26, 19]               # Wheel (fr)
    10: [10, 8, 27, 19]             # Bolt (fr)
    11: [7, null, null, null]       # Back left fender
    12: [9, 11, 26, 20]             # Wheel (bl; single)
    13: [10, 11, 27, 20]            # Bolt (bl; single)
    14: [9, 11, 26, 21]             # Wheel1 (bl; double)
    15: [9, 11, 26, 22]             # Wheel2 (bl; double)
    16: [10, 11, 27, 21]            # Bolt1 (bl; double)
    17: [10, 11, 27, 22]            # Bolt2 (bl; double)
    18: [8, null, null, null]       # Back right fender
    19: [9, 18, 26, 23]             # Wheel (br; single)
    20: [10, 18, 27, 23]            # Bolt (br; single)
    21: [9, 18, 26, 24]             # Wheel1 (br; double)
    22: [9, 18, 26, 25]             # Wheel2 (br; double)
    23: [10, 18, 27, 24]            # Bolt1 (br; double)
    24: [10, 18, 27, 25]            # Bolt2 (br; double)
    25: [10, 1, 27, 3]              # Bolt (Cabin1)
    26: [10, 1, 27, 4]              # Bolt (Cabin2)
    27: [10, 1, 27, 2]              # Bolt (Chassis front~center)
    28: [10, 2, 27, 8]              # Bolt (Chassis center~back)
    29: [10, 3, 27, 10]             # Bolt (Load)

# As collision matrices are skew-symmetric by nature, we only encode the upper 
# triangular half of it. In addition, collision matrices would generally have
# moderately high sparsity, so we will encode the matrix in key-value format
# rather than as full 2D matrix. Keys are instance ids encoded above, and
# values are lists containing up to six integer values of +/-[1~3], denoting
# that the instance pairs would collide if one is moved along x+/x-/y+/y-/z+/
# z- directions w.r.t. the other.
pairwise_collisions:
    0,1: [1, -2, 3, -3]
    0,2: [1]
    0,4: [1]
    0,5: [1, -1, 2, -2, -3]
    0,6: [1, -2, -3]
    0,7: [-2]
    0,8: [1, -1, 2, -2, 3]
    0,9: [1, -2, 3]
    0,10: [-2]
    0,11: [1]
    0,12: [1]
    0,13: [1]
    0,14: [1]
    0,15: [1]
    0,16: [1]
    0,17: [1]
    0,18: [1]
    0,19: [1]
    0,20: [1]
    0,21: [1]
    0,22: [1]
    0,23: [1]
    0,24: [1]
    0,25: [1, -1, -2, 3, -3]
    0,26: [1, -1, -2, 3, -3]
    0,27: [1]
    0,28: [1]
    0,29: [1]
    1,2: [1, -1, 2, 3, -3]
    1,3: [1]
    1,4: [1, 2]
    1,5: [1, -1, 2, -2, -3]
    1,6: [-3]
    1,7: [1, -1, 2, -2, -3]
    1,8: [1, -1, 2, -2, 3]
    1,9: [-3]
    1,10: [1, -1, 2, -2, 3]
    1,11: [1]
    1,13: [1]
    1,16: [1]
    1,17: [1]
    1,18: [1]
    1,20: [1]
    1,23: [1]
    1,24: [1]
    1,25: [1, -1, -2, 3, -3]
    1,26: [1, -1, -2, 3, -3]
    1,27: [1, -1, -2, 3, -3]
    1,28: [1]
    1,29: [1]
    2,3: [1, -1, -2, 3, -3]
    2,4: [1, -2, 3, -3]
    2,5: [1, -1, -2, 3, -3]
    2,6: [-1]
    2,7: [-1]
    2,8: [1, -1, -2, 3, -3]
    2,9: [-1]
    2,10: [-1]
    2,11: [1, -1, -2, 3, -3]
    2,12: [-1]
    2,13: [-1]
    2,14: [-1]
    2,15: [-1]
    2,16: [-1]
    2,17: [-1]
    2,18: [1, -1, -2, 3, -3]
    2,19: [-1]
    2,20: [-1]
    2,21: [-1]
    2,22: [-1]
    2,23: [-1]
    2,24: [-1]
    2,25: [-1]
    2,26: [-1]
    2,27: [1, -1, -2, 3, -3]
    2,28: [1, -1, -2, 3, -3]
    2,29: [1]
    3,4: [2]
    3,5: [-1]
    3,6: [-1]
    3,7: [-1]
    3,8: [-1]
    3,9: [-1]
    3,10: [-1]
    3,11: [1, -1, 2, -2, -3]
    3,12: [-1, -3]
    3,13: [1, -1, 2, -2, -3]
    3,14: [-1, -3]
    3,15: [-1, -3]
    3,16: [1, -1, 2, -2, -3]
    3,17: [1, -1, 2, -2, -3]
    3,18: [1, -1, 2, -2, 3]
    3,19: [-1, 3]
    3,20: [1, -1, 2, -2, 3]
    3,21: [-1, 3]
    3,22: [-1, 3]
    3,23: [1, -1, 2, -2, 3]
    3,24: [1, -1, 2, -2, 3]
    3,25: [-1]
    3,26: [-1]
    3,27: [-1]
    3,28: [1, -1, -2, 3, -3]
    3,29: [1, -1, -2, 3, -3]
    4,5: [-1]
    4,6: [-1]
    4,7: [-1]
    4,8: [-1]
    4,9: [-1]
    4,10: [-1]
    4,11: [1, -1, 2, -2, -3]
    4,12: [-2]
    4,13: [-2]
    4,14: [-2]
    4,15: [-2]
    4,16: [-2]
    4,17: [-2]
    4,18: [1, -1, 2, -2, 3]
    4,19: [-2]
    4,20: [-2]
    4,21: [-2]
    4,22: [-2]
    4,23: [-2]
    4,24: [-2]
    4,25: [-1]
    4,26: [-1]
    4,27: [-1]
    4,28: [-1]
    4,29: [1, -1, -2, 3, -3]
    5,6: [1, -1, -2, -3]
    5,7: [1, -1, 2, -2, -3]
    5,8: [3]
    5,9: [3]
    5,10: [3]
    5,11: [1]
    5,12: [1]
    5,13: [1]
    5,14: [1]
    5,15: [1]
    5,16: [1]
    5,17: [1]
    5,25: [3]
    5,26: [3]
    6,7: [1, -1, 2, -2, -3]
    6,8: [3]
    6,9: [3]
    6,10: [3]
    6,11: [1]
    6,12: [1]
    6,13: [1]
    6,14: [1]
    6,15: [1]
    6,16: [1]
    6,17: [1]
    6,25: [3]
    6,26: [3]
    7,8: [3]
    7,9: [3]
    7,10: [3]
    7,11: [1]
    7,12: [1]
    7,13: [1]
    7,14: [1]
    7,15: [1]
    7,16: [1]
    7,17: [1]
    7,25: [3]
    7,26: [3]
    8,9: [1, -1, -2, 3]
    8,10: [1, -1, 2, -2, 3]
    8,18: [1]
    8,19: [1]
    8,20: [1]
    8,21: [1]
    8,22: [1]
    8,23: [1]
    8,24: [1]
    8,25: [-3]
    8,26: [-3]
    9,10: [1, -1, 2, -2, 3]
    9,18: [1]
    9,19: [1]
    9,20: [1]
    9,21: [1]
    9,22: [1]
    9,23: [1]
    9,24: [1]
    9,25: [-3]
    9,26: [-3]
    10,18: [1]
    10,19: [1]
    10,20: [1]
    10,21: [1]
    10,22: [1]
    10,23: [1]
    10,24: [1]
    10,25: [-3]
    10,26: [-3]
    11,12: [1, -1, -2, -3]
    11,13: [1, -1, 2, -2, -3]
    11,14: [1, -1, -2, -3]
    11,15: [1, -1, -2, -3]
    11,16: [1, -1, 2, -2, -3]
    11,17: [1, -1, 2, -2, -3]
    11,18: [3]
    11,19: [3]
    11,20: [3]
    11,21: [3]
    11,22: [3]
    11,23: [3]
    11,24: [3]
    11,29: [3]
    12,13: [1, -1, 2, -2, -3]
    12,18: [3]
    12,19: [3]
    12,20: [3]
    12,21: [3]
    12,22: [3]
    12,23: [3]
    12,24: [3]
    12,29: [3]
    13,18: [3]
    13,19: [3]
    13,20: [3]
    13,21: [3]
    13,22: [3]
    13,23: [3]
    13,24: [3]
    13,29: [3]
    14,15: [1]
    14,16: [1, -1, 2, -2, -3]
    14,17: [1]
    14,18: [3]
    14,19: [3]
    14,20: [3]
    14,21: [3]
    14,23: [3]
    14,29: [3]
    15,16: [-1]
    15,17: [1, -1, 2, -2, -3]
    15,18: [3]
    15,19: [3]
    15,20: [3]
    15,22: [3]
    15,24: [3]
    15,29: [3]
    16,17: [1]
    16,18: [3]
    16,19: [3]
    16,20: [3]
    16,21: [3]
    16,23: [3]
    16,29: [3]
    17,18: [3]
    17,19: [3]
    17,20: [3]
    17,22: [3]
    17,24: [3]
    17,29: [3]
    18,19: [1, -1, -2, 3]
    18,20: [1, -1, 2, -2, 3]
    18,21: [1, -1, -2, 3]
    18,22: [1, -1, -2, 3]
    18,23: [1, -1, 2, -2, 3]
    18,24: [1, -1, 2, -2, 3]
    18,29: [-3]
    19,20: [1, -1, 2, -2, 3]
    19,21: [1, -1, -2, 3]
    19,22: [1, -1, -2, 3]
    19,23: [1, -1, 2, -2, 3]
    19,24: [1, -1, 2, -2, 3]
    19,29: [-3]
    20,21: [1, -1, -2, 3]
    20,22: [1, -1, -2, 3]
    20,23: [1, -1, 2, -2, 3]
    20,24: [1, -1, 2, -2, 3]
    20,29: [-3]
    21,22: [1]
    21,23: [1, -1, 2, -2, 3]
    21,24: [1]
    21,29: [-3]
    22,23: [-1]
    22,24: [1, -1, 2, -2, 3]
    22,29: [-3]
    23,24: [1]
    23,29: [-3]
    24,29: [-3]
    25,26: [1]
    25,27: [1]
    25,28: [1]
    25,29: [1]
    26,27: [1]
    26,28: [1]
    26,29: [1]
    27,28: [1]
    27,29: [1]
    28,29: [1]