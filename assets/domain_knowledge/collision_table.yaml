# Provided ground-truth collision relations among the atomic parts making 
# up truck structures, encoded as matrix. The collision matrix encodes possible
# directions of disassembly of each atomic part w.r.t. some other part along
# x/y/z axes, computed from their respective poses in the desired completed
# structure.

# Group atomic parts by their categories and assign integer indices, which
# correspond to respective positions in the collision matrix.
part_groups:
    0: [cabin, quad_cabin, hemtt_cabin]
    1: [chassis_front]
    2: [chassis_center, flat_chassis_center, spares_chassis_center, staircase_quad_chassis_center, staircase_hemtt_chassis_center]
    3: [chassis_back]
    4: [load, platform, dumper, ladder, rocket_launcher]
    5: [fl_fender, normal_fl_fender, large_fl_fender]
    6: [fr_fender, normal_fr_fender, large_fr_fender]
    7: [bl_fender, normal_bl_fender, large_bl_fender]
    8: [br_fender, normal_br_fender, large_br_fender]
    9: [wheel, normal_wheel, large_wheel]
    10: [bolt]

# Assign integer indices to contact point types
contact_points:
    0: cabin/front1
    1: cabin/front2
    2: chassis_front/center
    3: chassis_front/cabin1
    4: chassis_front/cabin2
    5: chassis_front/lfw
    6: chassis_front/rfw
    7: chassis_center/front
    8: chassis_center/back
    9: chassis_back/center
    10: chassis_back/load
    11: chassis_back/lfw
    12: chassis_back/rfw
    13: load/back
    14: fl_fender/wheel
    15: fr_fender/wheel
    16: bl_fender/wheel
    17: br_fender/wheel
    18: wheel/bolt
    19: bolt/bolt

# Identify each part instance by a unique signature, as target assemblies may
# require multiple instances of the same part (group) in their structures. Then
# assign (arbitrary) integer indexing to be used as shortcut reference.
#
# Let A denote each part instance of interest, and B denote some other instance
# that allows A to be distinguished from other instances of the same category
# by virtue of a connection between A-B at contact points resp. X and Y.
# Then, represent each instance by a 4-tuple (part group id of A, instance id
# of B, contact point id of X, contact point id of Y). X,B,Y may be omitted
# and replaced by a filler value 'null' iff there is only one instance of the
# same part group as A in the whole structure and thus A is uniquely identified
# by the part group id.
#
# (Note: This will suffice for our domain where all instances of part groups
# with more than one instances can be uniquely determined by contact with their
# direct neighbors, but structures that have multiple copies of identical 
# substructures will need more rigorous and sophisticated approach in encoding
# the ground-truth oracle. But that's out of our scope for now.)
part_instances:
    0: [0, null, null, null]        # Cabin
    1: [1, null, null, null]        # Chassis front
    2: [2, null, null, null]        # Chassis center
    3: [3, null, null, null]        # Chassis back
    4: [4, null, null, null]        # Load
    5: [5, null, null, null]        # Front left fender
    6: [9, 5, 18, 14]               # Wheel (fl)
    7: [10, 5, 19, 14]              # Bolt (fl)
    8: [6, null, null, null]        # Front right fender
    9: [9, 8, 18, 15]               # Wheel (fr)
    10: [10, 8, 19, 15]             # Bolt (fr)
    11: [7, null, null, null]       # Back left fender
    12: [9, 11, 18, 16]             # Wheel (bl)
    13: [10, 11, 19, 16]            # Bolt (bl)
    14: [8, null, null, null]       # Back right fender
    15: [9, 14, 18, 17]             # Wheel (br)
    16: [10, 14, 19, 17]            # Bolt (br)
    17: [10, 1, 19, 3]              # Bolt (Cabin1)
    18: [10, 1, 19, 4]              # Bolt (Cabin2)
    19: [10, 1, 19, 2]              # Bolt (Chassis front~center)
    20: [10, 2, 19, 8]              # Bolt (Chassis center~back)
    21: [10, 3, 19, 10]             # Bolt (Load)

# As collision matrices are skew-symmetric by nature, we only encode the upper 
# triangular half of it. In addition, collision matrices would generally have
# moderately high sparsity, so we will encode the matrix in key-value format
# rather than as full 2D matrix. Keys are instance ids encoded above, and
# values are lists containing up to six integer values of +/-[1~3], denoting
# that the instance pairs would collide if one is moved along x+/x-/y+/y-/z+/
# z- directions w.r.t. the other.
pairwise_collisions:
    0,1: [1, -2, 3, -3]
    0,2: [1]
    0,4: [1]
    0,5: [1, -1, 2, -2, -3]
    0,6: [1, -2, -3]
    0,7: [-2]
    0,8: [1, -1, 2, -2, 3]
    0,9: [1, -2, 3]
    0,10: [-2]
    0,11: [1]
    0,12: [1]
    0,13: [1]
    0,14: [1]
    0,15: [1]
    0,16: [1]
    0,17: [1, -1, -2, 3, -3]
    0,18: [1, -1, -2, 3, -3]
    0,19: [1]
    0,20: [1]
    0,21: [1]
    1,2: [1, -1, 2, 3, -3]
    1,3: [1]
    1,4: [1, 2]
    1,5: [1, -1, 2, -2, -3]
    1,6: [-3]
    1,7: [1, -1, 2, -2, -3]
    1,8: [1, -1, 2, -2, 3]
    1,9: [3]
    1,10: [1, -1, 2, -2, 3]
    1,11: [1]
    1,13: [1]
    1,14: [1]
    1,16: [1]
    1,17: [1, -1, -2, 3, -3]
    1,18: [1, -1, -2, 3, -3]
    1,19: [1, -1, -2, 3, -3]
    1,20: [1]
    1,21: [1]
    2,3: [1, -1, -2, 3, -3]
    2,4: [1, -2, 3, -3]
    2,5: [1, -1, -2, 3, -3]
    2,6: [-1]
    2,7: [-1]
    2,8: [1, -1, -2, 3, -3]
    2,9: [-1]
    2,10: [-1]
    2,11: [1, -1, -2, 3, -3]
    2,12: [-1]
    2,13: [-1]
    2,14: [1, -1, -2, 3, -3]
    2,15: [-1]
    2,16: [-1]
    2,17: [-1]
    2,18: [-1]
    2,19: [1, -1, -2, 3, -3]
    2,20: [1, -1, -2, 3, -3]
    2,21: [1]
    3,4: [2]
    3,5: [-1]
    3,6: [-1]
    3,7: [-1]
    3,8: [-1]
    3,9: [-1]
    3,10: [-1]
    3,11: [1, -1, 2, -2, -3]
    3,12: [-1, -3]
    3,13: [1, -1, 2, -2, -3]
    3,14: [1, -1, 2, -2, 3]
    3,15: [-1, 3]
    3,16: [1, -1, 2, -2, 3]
    3,17: [-1]
    3,18: [-1]
    3,19: [-1]
    3,20: [1, -1, -2, 3, -3]
    3,21: [1, -1, -2, 3, -3]
    4,5: [-1]
    4,6: [-1]
    4,7: [-1]
    4,8: [-1]
    4,9: [-1]
    4,10: [-1]
    4,11: [1, -1, 2, -2, -3]
    4,12: [-2]
    4,13: [-2]
    4,14: [1, -1, 2, -2, 3]
    4,15: [-2]
    4,16: [-2]
    4,17: [-1]
    4,18: [-1]
    4,19: [-1]
    4,20: [-1]
    4,21: [1, -1, -2, 3, -3]
    5,6: [1, -1, -2, -3]
    5,7: [1, -1, 2, -2, -3]
    5,8: [3]
    5,9: [3]
    5,10: [3]
    5,11: [1]
    5,12: [1]
    5,13: [1]
    5,17: [3]
    5,18: [3]
    6,7: [1, -1, 2, -2, -3]
    6,8: [3]
    6,9: [3]
    6,10: [3]
    6,11: [1]
    6,12: [1]
    6,13: [1]
    6,17: [3]
    6,18: [3]
    7,8: [3]
    7,9: [3]
    7,10: [3]
    7,11: [1]
    7,12: [1]
    7,13: [1]
    7,17: [3]
    7,18: [3]
    8,9: [1, -1, -2, 3]
    8,10: [1, -1, 2, -2, 3]
    8,14: [1]
    8,15: [1]
    8,16: [1]
    8,17: [-3]
    8,18: [-3]
    9,10: [1, -1, 2, -2, 3]
    9,14: [1]
    9,15: [1]
    9,16: [1]
    9,17: [-3]
    9,18: [-3]
    10,14: [1]
    10,15: [1]
    10,16: [1]
    10,17: [-3]
    10,18: [-3]
    11,12: [1, -1, -2, -3]
    11,13: [1, -1, 2, -2, -3]
    11,14: [3]
    11,15: [3]
    11,16: [3]
    11,21: [3]
    12,13: [1, -1, 2, -2, -3]
    12,14: [3]
    12,15: [3]
    12,16: [3]
    12,21: [3]
    13,14: [3]
    13,15: [3]
    13,16: [3]
    13,21: [3]
    14,15: [1, -1, -2, 3]
    14,16: [1, -1, 2, -2, 3]
    14,21: [-3]
    15,16: [1, -1, 2, -2, 3]
    15,21: [-3]
    16,21: [-3]
    17,18: [1]
    17,19: [1]
    17,20: [1]
    17,21: [1]
    18,19: [1]
    18,20: [1]
    18,21: [1]
    19,20: [1]
    19,21: [1]
    20,21: [1]